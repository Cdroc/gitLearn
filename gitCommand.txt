1.git config --global user.name "Cdroc"			//设置用户名
  git config --global user.email "Cdroc87@gmail.com"	//设置邮箱
2.mkdir learngit	//创建learngit目录
  cd learngit		//打开learngit目录
  pwd			//显示当前目录路径
  git init		//把当前目录变成Git可以管理的仓库
  vim readme.txt	//用vim打开readme.txt
  (注释：i、a、s进入编辑状态；Esc退出编辑状态；:wq保存并退出vim :exit()退出vim)
  git add readme.txt	//把readme.txt添加到仓库（注释：没有任何提示，表示添加成功！）
  git commit -m "wrote a readme file"	//把文件提交到仓库
3.git status		//查看仓库当前的状态
  git diff		//查看修改内容
4.git log		//显示从最近到最远的提交日志
  git log --pretty=oneline	//简化显示日志
  (HEAD当前版本、HEAD^上一个版本、HEAD^^上上一个版本、HEAD~100往上100个版本）
  git reset --hard HEAD^	//回退到上一个版本
  cat readme.txt	//查看readme.txt内容
  git reset --hard 3628164	//回到指定版本（3628164为版本号的前几位）
  git reflog		//记录的每一次命令
5.vim test.txt		//新建件test.txt，并打开
  git diff HEAD -- readme.txt	//对比当前文件readme.txt的不同
6.git checkout -- readme.txt	//把readme.txt文件在工作区的修改全部撤销（回到最近一次git commit 或 git add 时的状态）
  git reset HEAD readme.txt	//把readme.txt暂存区的修改撤销掉，重新放回工作区
  rm test.txt			//删除test.txt
  git rm test.txt		//从版本库中删除（git commit提交删除）
  git checkout -- test.txt	//恢复删除（git checkout -- file 用版本库的版本替换工作区的版本）
7.ssh-keygen -t rsa -C "Cdroc87@gmail.com"	//创建SSH Key（.ssh目录->id_rsa私钥，id_rsa.pub公钥）
8.touch test.txt		//创建test.txt文件
  git remote add origin https://github.com/Cdroc/gitLearn.git	//在本地添加远程库origin
  git push -u origin master	//把本地库的所有内容推送到远程库上
  （第一次推送master分支时，加-u，可以把本地master和远程master关联起来）
9.git clone https://github.com/Cdroc/gitLearn.git		//克隆远程库到本地库
  （https://github.com/Cdroc/gitLearn.git 速度慢，每次推送都必须输入口令；
    git@github.com:Cdroc/gitLearn.git 默认的git://使用ssh,通过ssh支持的原生git协议速度最快，用原生git克隆需要添加SSH Key）
10.git checkout -b dev		//创建并切换到分支dev
   git branch dev		//创建分支dev
   git checkout dev		//切换到分支dev
   git branch			//查看所有分支（前面有*号的分支为当前分支）
   git merge dev			//合并指定分支到当前分支
  （先执行git branch master,切换到分支master,再执行git merge dev,合并指定分支dev到当前分支master）
   git branch -d dev		//删除dev分支
11.git log --graph --pretty=oneline --abbrev-commit	//查看分支合并图
12.git merge --no-ff -m "merge with no-ff" dev	//合并时，禁用Fast forward模式
   （加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出曾经做过合并，而fast forward合并就看不出曾经做过合并）
   git log			//查看分支历史
13.git stash			//把当前工作现场“储藏”起来
   git stash list		//查看储藏的工作现场
   git stash apply		//恢复工作现场，但stash内容并不删除
   git stash drop		//删除stash储藏的工作内容
   git stash pop		//恢复工作现场的同时把stash内容也删了
   git stash apply stash@{0}	//恢复指定的工作现场
14.git branch -D feature	//强行删除未合并的feature分支
15.git remote				//查看远程库信息
   git remote -v			//显示详细的信息
   git push origin master		//推送自己的修改到对应分支
   git checkout -b dev origin/dev	//创建远程分支origin/dev到本地分支dev
   git pull				//把最新的提交从origin/dev抓下来
   git branch --set-upstream dev origin/dev	//指定本地dev分支与远程origin/dev分支链接
   （git pull失败，可以先尝试建立对应的链接）
16.git tag v1.0			//创建标签
   git tag			//查看所有标签
   git log --pretty=oneline --abbrev-commit	//查看历史提交的commit id
   git tag v1.1 atef695		//为指定commit id打上标签
   git show v1.1		//查看标签信息
   git tag -a v1.2 -m "version 1.2 released" se987ef	//创建带说明的标签
   （-a指定标签名，-m指定说明文字）
   git tag -s v0.2 -m "signed version 0.2 released" esc165a	//-s私钥签名一个标签
   （签名采用PGP签名，必须安装gpg（GnuPG））

   （默认标签是打在最新提交的commit上）
17.git tag -d v1.0		//删除标签
   git push origin v1.1		//推送标签到远程库
   git push origin --tags	//推送所有未推送过的本地标签到远程库
   git push origin :refs/tags/v1.1	//删除远程标签
   （要先删除本地标签git tag -d v1.1，才能推送删除远程标签）
18.git config --global color.ui true	//让git显示颜色
19.git config --global alias.st status	//配置别名，st代表status
   git config --global alias.unstage 'reset HEAD'	//配置一个unstage别名
   git config --global alias.last 'log -1'		//配置一个last别名，让其显示最后一次提交信息
   （加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用，配置文件放在.git/config中）
   （当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中）
